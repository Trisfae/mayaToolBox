from PySide import QtCore
from PySide import QtGui
from shiboken import wrapInstance

import maya.cmds as cmds
import maya.OpenMaya as om
import maya.OpenMayaUI as omui

def maya_main_window():
    main_window_ptr = omui.MQtUtil.mainWindow()
    return wrapInstance(long(main_window_ptr), QtGui.QWidget)
    
class shsUi(QtGui.QDialog):
    
    def __init__(self, parent=maya_main_window()):
        super(shsUi, self).__init__(parent)
        
        self.setWindowTitle("shsToolBox")
        self.setWindowFlags(QtCore.Qt.Tool)
        
        self.setAttribute(QtCore.Qt.WA_DeleteOnClose)
        
        self.create_layout()
        self.create_connections()
        
    def create_layout(self):
        self.frustum_btn = QtGui.QPushButton("Frustum TGL")
        self.scv_btn = QtGui.QPushButton("Select Current Viewable")
        self.rms_btn = QtGui.QPushButton("Rename MTL/SG")
        self.tbd3_btn = QtGui.QPushButton("tbd3")
        
        main_layout = QtGui.QVBoxLayout()
        main_layout.setContentsMargins(10, 10, 10, 10)
        main_layout.setSpacing(5)
        main_layout.addSpacing(5)
        main_layout.addWidget(self.frustum_btn)
        main_layout.addWidget(self.scv_btn)
        main_layout.addWidget(self.rms_btn)
        main_layout.addWidget(self.tbd3_btn)
        main_layout.addStretch()
        
        self.setLayout(main_layout)
        
    def create_connections(self):
        self.frustum_btn.clicked.connect(shsUi.make_frustum)
        self.scv_btn.clicked.connect(shsUi.make_scv)
        self.rms_btn.clicked.connect(shsUi.make_rms)
        self.tbd3_btn.clicked.connect(shsUi.make_tbd3)
        
    @classmethod
    def make_frustum(cls):
        curcam = cmds.ls(type = "camera")
        for ncp in curcam:
            cmds.setAttr(ncp+'.nearClipPlane', 1)
        for fcp in curcam:
            cmds.setAttr(fcp+'.farClipPlane',1000000)
        for c in curcam:
            dcf = cmds.getAttr(c + '.displayCameraFrustum')
            if dcf == 0 :
                cmds.setAttr(c + '.displayCameraFrustum', 1)
            if dcf == 1 :                
                cmds.setAttr(c + '.displayCameraFrustum', 0)
                
    @classmethod
    def make_scv(cls):
        activeView = omui.M3dView.active3dView()
        om.MGlobal.selectFromScreen(0,0,activeView.portWidth(),activeView.portHeight(),om.MGlobal.kReplaceList)
        
    @classmethod
    def make_rms(cls):
        getMtl = cmds.ls(sl=1, o=1)
        for s in getMtl:
            print s
        getUnd = ('_sg')
        addMtl = ('_mtl')
        getSG = cmds.listConnections( getMtl, d=True, type='shadingEngine')
        print getSG
        getName = cmds.rename(getSG, ('%s%s' % (s, getUnd)))
        getMtl = cmds.rename(getMtl, ('%s%s' % (s, addMtl)))
        print getName
        print getMtl
        
    @classmethod
    def make_tbd3(cls):
        pass
        
        
if __name__ == "__main__":
    
    try:
        ui.close()
    except:
        pass
    
    ui = shsUi()
    ui.show()
